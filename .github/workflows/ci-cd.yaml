name: Bookstore API CI/CD
on:
  push:
    branches: [ main ]
    tags:
    - 'prod-release*'
  workflow_dispatch:


jobs:
  Build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      new_tag: ${{ steps.version_tag.outputs.new_tag }}
      is_production: ${{ steps.check_environment.outputs.is_production }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Needed to get all tags

    - name: Check if production deployment
      id: check_environment
      run: |
        if [[ "${{ github.ref }}" == refs/tags/prod-release* ]]; then
          echo "is_production=true" >> $GITHUB_OUTPUT
          echo "Detected production release tag: ${{ github.ref }}"
        else
          echo "is_production=false" >> $GITHUB_OUTPUT
          echo "Not a production release"
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set lowercase repository owner
      run: |
        echo "OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Bump version and push tag
      id: version_tag
      uses: anothrNick/github-tag-action@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WITH_V: true
        PRERELEASE: ${{ steps.check_environment.outputs.is_production != 'true' }}

    - name: Build and push Docker image
      run: |
        echo "Building image with tag: ${{ steps.version_tag.outputs.new_tag }}"
        docker build -t ghcr.io/${{ env.OWNER_LC }}/preparesh-bookstore-api:${{ steps.version_tag.outputs.new_tag }} .
        docker push ghcr.io/${{ env.OWNER_LC }}/preparesh-bookstore-api:${{ steps.version_tag.outputs.new_tag }}

  Deploy_Development:
    runs-on: self-hosted
    needs: Build
    if: needs.Build.outputs.is_production != 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install kubectl
      uses: azure/setup-kubectl@v3

    - name: Install Helm
      uses: azure/setup-helm@v3

    - name: Set lowercase repository owner
      run: |
        echo "OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Deploy with Helm to Development
      run: |
        export KUBECONFIG=$HOME/.kube/config
        OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')
        helm upgrade --install api ./helm/bookstore-api \
          --set image.repository=ghcr.io/${OWNER_LC}/preparesh-bookstore-api \
          --set image.tag=${{ needs.Build.outputs.new_tag }} \

  Deploy_Production:
    runs-on: self-hosted
    needs: Build
    if: needs.Build.outputs.is_production == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install kubectl
      uses: azure/setup-kubectl@v3

    - name: Install Helm
      uses: azure/setup-helm@v3

    - name: Set lowercase repository owner
      run: |
        echo "OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Update image tag in ArgoCD values file
      run: |
        echo "Updating production image tag to: ${{ needs.Build.outputs.new_tag }}"

        VALUES_FILE="helm/bookstore-api/values-production.yaml"
        NEW_TAG="${{ needs.Build.outputs.new_tag }}"

        # This assumes the tag is defined in the format: tag: "v1.0.0" or tag: v1.0.0
        sed -i '' "s/tag:.*$/tag: \"${NEW_TAG}\"/" "$VALUES_FILE"

        # Verify the change
        echo "Updated values file content:"
        grep -A 2 "tag:" $VALUES_FILE

        git add $VALUES_FILE
        git commit -m "Update production image tag to ${{ needs.Build.outputs.new_tag }}"
        git push
